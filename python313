import os
import zipfile
import subprocess
import shutil
import boto3
import uuid
import logging
import json
import urllib.request
import urllib.error

logger = logging.getLogger()
logger.setLevel(logging.INFO)

"""
The event for this function should be in the format below
===============================
{
    'library': 'library_name'
}
===============================
The function will return a signed URL of the created library in the 'download_url' part
of the returned json object

Required environment variables:
- S3_BUCKET_NAME: The name of the S3 bucket to store the libraries
- S3_KEY_PREFIX: The folder path prefix in the S3 bucket (should end with /)
- update pyversion on line 103 to fix the filne name
"""

def format_response(status_code, body):
    """
    Format the response for API Gateway proxy integration
    """
    return {
        'statusCode': status_code,
        'headers': {
            'Content-Type': 'application/json',
            'Access-Control-Allow-Origin': '*',  # For CORS support
            'Access-Control-Allow-Credentials': True
        },
        'body': json.dumps(body),
        'isBase64Encoded': False
    }

def is_valid_package_name(package_name):
    """
    Validate if the package name exists on PyPI using the standard library
    """
    try:
        url = f"https://pypi.org/pypi/{package_name}/json"
        req = urllib.request.Request(url, method="HEAD")
        with urllib.request.urlopen(req, timeout=3) as response:
            return response.status == 200
    except urllib.error.HTTPError as e:
        if e.code == 404:
            logger.info(f"Package {package_name} not found on PyPI")
            return False
        else:
            logger.warning(f"HTTP error checking package {package_name}: {e.code}")
            # If we can't check, we'll assume it might be valid and let pip try
            return True
    except Exception as e:
        logger.warning(f"Error checking package validity: {str(e)}")
        # If we can't check, we'll assume it might be valid and let pip try
        return True

def lambda_handler(event, context):
    try:
        # Get environment variables with validation
        bucket_name = os.environ.get('S3_BUCKET_NAME')
        key_prefix = os.environ.get('S3_KEY_PREFIX', 'Python-libs/')
        
        # Validate environment variables
        if not bucket_name:
            logger.error("Missing required environment variable: S3_BUCKET_NAME")
            return format_response(500, {"message": "Server configuration error: Missing S3 bucket name"})
        
        # Ensure key_prefix ends with a slash
        if key_prefix and not key_prefix.endswith('/'):
            key_prefix += '/'
            
        # Parse the body if coming from API Gateway
        if 'body' in event and event['body']:
            try:
                if isinstance(event['body'], str):
                    body = json.loads(event['body'])
                else:
                    body = event['body']
                
                # Update event with parsed body
                event.update(body)
            except json.JSONDecodeError as e:
                logger.error(f"Failed to parse request body: {str(e)}")
                return format_response(400, {"message": "Invalid JSON in request body"})
        
        # Get the library name from the event with proper error handling
        if 'library' not in event:
            logger.error("Missing 'library' parameter in event")
            return format_response(400, {"message": "Missing required parameter 'library'"})
        
        filename = event.get('library')
        pyversion = "python313"
        
        logger.info(f"Processing library: {filename} for Python version: {pyversion}")

        # Validate the library name
        if not filename or not isinstance(filename, str) or len(filename.strip()) == 0:
            logger.error(f"Invalid library name: {filename}")
            return format_response(400, {"message": f"Invalid library name: {filename}"})
        
        # Check if the library exists on PyPI
        if not is_valid_package_name(filename):
            logger.error(f"Library '{filename}' not found on PyPI")
            return format_response(404, {"message": f"Library '{filename}' not found or is not a valid PyPI package"})

        # Define paths and S3 info
        tmp_dir = f"/tmp/{filename}_package"
        zip_path = f"/tmp/{filename}_{pyversion}.zip"
        
        # The file name will be in the format Library_python313.zip
        s3_key = f"{key_prefix}{filename}_{pyversion}.zip"

        # Clean up from previous runs
        logger.info("Cleaning up temporary directories")
        shutil.rmtree(tmp_dir, ignore_errors=True)
        if os.path.exists(zip_path):
            os.remove(zip_path)
        os.makedirs(tmp_dir, exist_ok=True)

        # Install package to tmp_dir
        logger.info(f"Installing {filename} to {tmp_dir}")
        try:
            # Capture the output for better error messages
            result = subprocess.run(
                ['pip', 'install', '--target', tmp_dir, filename],
                capture_output=True,
                text=True,
                check=False
            )
            
            if result.returncode != 0:
                error_msg = result.stderr
                logger.error(f"Failed to install {filename}: {error_msg}")
                
                # Check for common error patterns
                if "No matching distribution found" in error_msg:
                    return format_response(404, {"message": f"Library '{filename}' not found or could not be installed"})
                elif "Invalid requirement" in error_msg:
                    return format_response(400, {"message": f"'{filename}' is not a valid package name format"})
                else:
                    return format_response(500, {"message": f"Failed to install {filename}. Error: {error_msg}"})
                    
        except Exception as e:
            logger.error(f"Exception during installation: {str(e)}")
            return format_response(500, {"message": f"Failed to install {filename}. Error: {str(e)}"})

        # Check if any files were actually installed
        if not os.listdir(tmp_dir):
            logger.error(f"No files were installed for {filename}")
            return format_response(404, {"message": f"Library '{filename}' was found but no files were installed. It might be an empty package."})

        # Zip the installed package
        logger.info(f"Creating zip file at {zip_path}")
        try:
            with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
                for root, _, files in os.walk(tmp_dir):
                    for file in files:
                        abs_path = os.path.join(root, file)
                        rel_path = os.path.relpath(abs_path, tmp_dir)
                        zipf.write(abs_path, rel_path)
        except Exception as e:
            logger.error(f"Failed to create zip file: {str(e)}")
            return format_response(500, {"message": f"Failed to create zip file. Error: {str(e)}"})

        # Upload to S3
        logger.info(f"Uploading to S3 bucket {bucket_name} with key {s3_key}")
        try:
            s3 = boto3.client('s3')
            s3.upload_file(zip_path, bucket_name, s3_key)
        except Exception as e:
            logger.error(f"Failed to upload to S3: {str(e)}")
            return format_response(500, {"message": f"Failed to upload to S3. Error: {str(e)}"})

        # Generate pre-signed URL (valid for 1 hour)
        logger.info("Generating pre-signed URL")
        try:
            signed_url = s3.generate_presigned_url(
                'get_object',
                Params={'Bucket': bucket_name, 'Key': s3_key},
                ExpiresIn=3600
            )
        except Exception as e:
            logger.error(f"Failed to generate pre-signed URL: {str(e)}")
            return format_response(500, {"message": f"Failed to generate download URL. Error: {str(e)}"})

        # Clean up temporary files to free Lambda storage
        logger.info("Cleaning up temporary files")
        shutil.rmtree(tmp_dir, ignore_errors=True)
        if os.path.exists(zip_path):
            os.remove(zip_path)

        logger.info(f"Successfully processed library: {filename}")
        return format_response(200, {
            "message": f'{filename} library zipped and uploaded successfully',
            "s3_key": s3_key,
            "download_url": signed_url
        })
        
    except Exception as e:
        logger.error(f"Unexpected error: {str(e)}")
        return format_response(500, {"message": f"An unexpected error occurred: {str(e)}"})
